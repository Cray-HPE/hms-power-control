# MIT License
#
# (C) Copyright [2023] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the PCS transitions API
# Author: Mitch Schooler
# Service: Power Control Service

# HMS test metrics test cases: 6
# PUT /transitions fails
# PATCH /transitions fails
# POST /transitions non-present node fails
# POST /transitions invalid node fails
# GET /transitions/{transitionID} non-existent transitionID
# GET /transitions/{transitionID} invalid transitionID
---
test_name: Verify transitions rejects unsupported methods

stages:
  - name: Ensure that transitions rejects unsupported PUT operations
    request:
      url: "{pcs_base_url}/transitions"
      method: PUT
      verify: !bool "{verify}"
    response:
      status_code: 405

  - name: Ensure that transitions rejects unsupported PATCH operations
    request:
      url: "{pcs_base_url}/transitions"
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 405

---
test_name: Verify transitions handles requests for non-present nodes

stages:
  - name: Attempt a power transition for a non-present node
    request:
      url: "{pcs_base_url}/transitions"
      #TODO: taskDeadlineMinutes configuration?
      json: {"operation":"on","taskDeadlineMinutes":5,"location":[{"xname":"x9999c7s9b9n9"}]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
              operation:
                required: True
                type: str
                enum:
                  - "On"
      save:
        json:
          transition_id: transitionID

  - name: Poll until the on transition operation has completed
    #TODO: this configuration
    max_retries: 30
    delay_after: 1
    request:
      url: "{pcs_base_url}/transitions/{transition_id}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the operation to complete
            allowempty: True
            mapping:
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed on transition data
    request:
      url: "{pcs_base_url}/transitions/{transition_id}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
                enum:
                  - "{transition_id}"
              operation:
                type: str
                required: True
                enum:
                  - "On"
              createTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              tasks:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n9"
                      taskStatus:
                        type: str
                        required: True
                        enum:
                          - "failed"
                      taskStatusDescription:
                        type: str
                        required: True
                        enum:
                          - "Failed to achieve transition"
                      error:
                        type: str
                        required: True
                        enum:
                          - "Missing xname"

---
test_name: Verify transitions handles requests for invalid nodes

stages:
  - name: Attempt a power transition for an invalid node
    request:
      url: "{pcs_base_url}/transitions"
      #TODO: taskDeadlineMinutes configuration?
      json: {"operation":"on","taskDeadlineMinutes":5,"location":[{"xname":"FAKE"}]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
              operation:
                required: True
                type: str
                enum:
                  - "On"
      save:
        json:
          transition_id: transitionID

  - name: Poll until the on transition operation has completed
    #TODO: this configuration
    max_retries: 30
    delay_after: 1
    request:
      url: "{pcs_base_url}/transitions/{transition_id}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the operation to complete
            allowempty: True
            mapping:
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed on transition data
    request:
      url: "{pcs_base_url}/transitions/{transition_id}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
                enum:
                  - "{transition_id}"
              operation:
                type: str
                required: True
                enum:
                  - "On"
              createTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              tasks:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "FAKE"
                      taskStatus:
                        type: str
                        required: True
                        enum:
                          - "failed"
                      taskStatusDescription:
                        type: str
                        required: True
                        enum:
                          - "Failed to achieve transition"
                      error:
                        type: str
                        required: True
                        enum:
                          - "Invalid xname"

---
test_name: Verify transitions handles non-existent transitionIDs

stages:
  - name: Attempt to retrieve the transition data for a non-existent transitionID
    request:
      url: "{pcs_base_url}/transitions/9z99z999-999z-999z-z9zz-zz9z99z9zzzz"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              detail:
                type: str
                required: True
                enum:
                  - "invalid UUID format"
              status:
                type: int
                required: True
                enum:
                  - 400
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"

---
test_name: Verify transitions handles invalid transitionIDs

stages:
  - name: Attempt to retrieve the transition data for an invalid transitionID
    request:
      url: "{pcs_base_url}/transitions/FAKE"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              detail:
                type: str
                required: True
                enum:
                  - "invalid UUID length: 4"
              status:
                type: int
                required: True
                enum:
                  - 400
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"