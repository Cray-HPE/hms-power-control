# MIT License
#
# (C) Copyright [2022-2023] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the PCS power-status API
# Author: Mitch Schooler
# Service: Power Control Service

# HMS test metrics test cases: 6
# GET /power-status all components
# GET /power-status?xname={xname} Node
# GET /power-status?xname={xname} NodeBMC
# GET /power-status multiple xnames
# GET /power-status?powerStateFilter={filter} Node
# GET /power-status?managementStateFilter={filter} Node
---
test_name: Verify power-status for all components

stages:
  - name: Retrieve the power-status for all components
    request:
      url: "{pcs_base_url}/power-status"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              status:
                type: seq
                matching: all
                required: True
                range:
                  min: 1
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                      powerState:
                        type: str
                        required: True
                        enum:
                          - "on"
                          - "off"
                          - "undefined"
                      managementState:
                        type: str
                        required: True
                        enum:
                          - "available"
                          - "unavailable"
                      error:
                        type: str
                        required: True
                      supportedPowerTransitions:
                        type: seq
                        matching: all
                        required: True
                        sequence:
                          - type: str
                            required: True
                            # no enum here since supportedPowerTransitions come
                            # from Redfish and vary depending on hardware
                      lastUpdated:
                        type: str
                        required: True

---
test_name: Verify power-status for a Node

stages:
  - name: Retrieve a Node from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_xname: Components[0].ID

  - name: Retrieve the power-status for the target Node
    request:
      url: "{pcs_base_url}/power-status?xname={node_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              status:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      powerState:
                        type: str
                        required: True
                        enum:
                          - "on"
                          - "off"
                          - "undefined"
                      managementState:
                        type: str
                        required: True
                        enum:
                          - "available"
                          - "unavailable"
                      error:
                        type: str
                        required: True
                      supportedPowerTransitions:
                        type: seq
                        matching: all
                        required: True
                        sequence:
                          - type: str
                            required: True
                            # no enum here since supportedPowerTransitions come
                            # from Redfish and vary depending on hardware
                      lastUpdated:
                        type: str
                        required: True

---
test_name: Verify power-status for a NodeBMC

stages:
  - name: Retrieve a NodeBMC from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=NodeBMC&state=Ready&flag=OK"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          bmc_xname: Components[0].ID

  - name: Retrieve the power-status for the target NodeBMC
    request:
      url: "{pcs_base_url}/power-status?xname={bmc_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              status:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{bmc_xname}"
                      powerState:
                        type: str
                        required: True
                        enum:
                          - "on"
                          - "off"
                          - "undefined"
                      managementState:
                        type: str
                        required: True
                        enum:
                          - "available"
                          - "unavailable"
                      error:
                        type: str
                        required: True
                      supportedPowerTransitions:
                        type: seq
                        matching: all
                        required: True
                        sequence:
                          - type: str
                            required: True
                            # no enum here since supportedPowerTransitions come
                            # from Redfish and vary depending on hardware
                      lastUpdated:
                        type: str
                        required: True

---
test_name: Verify power-status for multiple components

stages:
  - name: Retrieve multiple Nodes from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node1_xname: Components[0].ID
          node2_xname: Components[1].ID
          node3_xname: Components[2].ID

  - name: Retrieve the power-status for the target Nodes
    request:
      url: "{pcs_base_url}/power-status?xname={node1_xname}&xname={node2_xname}&xname={node3_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern.testutils.helpers:validate_pykwalify
          extra_kwargs:
            schema:
              type: map
              required: True
              mapping:
                status:
                  type: seq
                  matching: all
                  required: True
                  sequence:
                    - type: map
                      required: True
                      mapping:
                        xname:
                          type: str
                          required: True
                          enum:
                            - "{node1_xname}"
                            - "{node2_xname}"
                            - "{node3_xname}"
                        powerState:
                          type: str
                          required: True
                          enum:
                            - "on"
                            - "off"
                            - "undefined"
                        managementState:
                          type: str
                          required: True
                          enum:
                            - "available"
                            - "unavailable"
                        error:
                          type: str
                          required: True
                        supportedPowerTransitions:
                          type: seq
                          matching: all
                          required: True
                          sequence:
                            - type: str
                              required: True
                              # no enum here since supportedPowerTransitions come
                              # from Redfish and vary depending on hardware
                        lastUpdated:
                          type: str
                          required: True
        - function: tavern.testutils.helpers:validate_content
          extra_kwargs:
            comparisons:
              - jmespath: "length(@.status)"
                operator: "eq"
                expected: 3

---
test_name: Verify power-status for a Node using a powerStateFilter

stages:
  - name: Retrieve a Node from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_xname: Components[0].ID

  - name: Retrieve the power-status for the target Node
    request:
      url: "{pcs_base_url}/power-status?xname={node_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_power_state: status[0].powerState

  - name: Retrieve the power-status for the target Node using a powerStateFilter
    request:
      url: "{pcs_base_url}/power-status?xname={node_xname}&powerStateFilter={node_power_state}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern.testutils.helpers:validate_pykwalify
          extra_kwargs:
            schema:
              type: map
              required: True
              mapping:
                status:
                  type: seq
                  matching: all
                  required: True
                  sequence:
                    - type: map
                      required: True
                      mapping:
                        xname:
                          type: str
                          required: True
                          enum:
                            - "{node_xname}"
                        powerState:
                          type: str
                          required: True
                          enum:
                            - "{node_power_state}"
                        managementState:
                          type: str
                          required: True
                          enum:
                            - "available"
                            - "unavailable"
                        error:
                          type: str
                          required: True
                        supportedPowerTransitions:
                          type: seq
                          matching: all
                          required: True
                          sequence:
                            - type: str
                              required: True
                              # no enum here since supportedPowerTransitions come
                              # from Redfish and vary depending on hardware
                        lastUpdated:
                          type: str
                          required: True
        - function: tavern.testutils.helpers:validate_content
          extra_kwargs:
            comparisons:
              - jmespath: "length(@.status)"
                operator: "eq"
                expected: 1

---
test_name: Verify power-status for a Node using a managementStateFilter

stages:
  - name: Retrieve a Node from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_xname: Components[0].ID

  - name: Retrieve the power-status for the target Node
    request:
      url: "{pcs_base_url}/power-status?xname={node_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_management_state: status[0].managementState

  - name: Retrieve the power-status for the target Node using a managementStateFilter
    request:
      url: "{pcs_base_url}/power-status?xname={node_xname}&managementStateFilter={node_management_state}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern.testutils.helpers:validate_pykwalify
          extra_kwargs:
            schema:
              type: map
              required: True
              mapping:
                status:
                  type: seq
                  matching: all
                  required: True
                  sequence:
                    - type: map
                      required: True
                      mapping:
                        xname:
                          type: str
                          required: True
                          enum:
                            - "{node_xname}"
                        powerState:
                          type: str
                          required: True
                          enum:
                            - "on"
                            - "off"
                            - "undefined"
                        managementState:
                          type: str
                          required: True
                          enum:
                            - "{node_management_state}"
                        error:
                          type: str
                          required: True
                        supportedPowerTransitions:
                          type: seq
                          matching: all
                          required: True
                          sequence:
                            - type: str
                              required: True
                              # no enum here since supportedPowerTransitions come
                              # from Redfish and vary depending on hardware
                        lastUpdated:
                          type: str
                          required: True
        - function: tavern.testutils.helpers:validate_content
          extra_kwargs:
            comparisons:
              - jmespath: "length(@.status)"
                operator: "eq"
                expected: 1
