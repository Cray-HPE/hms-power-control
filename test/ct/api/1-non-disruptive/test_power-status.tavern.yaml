# MIT License
#
# (C) Copyright [2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the PCS power-status API
# Author: Mitch Schooler
# Service: Power Control Service

# HMS test metrics test cases: 3
# GET /power-status all components
# GET /power-status?xname={xname} Node
# GET /power-status?xname={xname} NodeBMC
---
test_name: Verify PCS power-status for all components

stages:
  - name: Retrieve the PCS power-status for all components
    request:
      url: "{pcs_base_url}/power-status"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              status:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                      powerState:
                        type: str
                        required: True
                        enum:
                          - "on"
                          - "off"
                          - "undefined"
                      managementState:
                        type: str
                        required: True
                        enum:
                          - "available"
                          - "unavailable"
                      error:
                        type: str
                        required: True
                      supportedPowerTransitions:
                        type: seq
                        matching: all
                        required: True
                        sequence:
                          - type: str
                            required: True
                            # no enum here since supportedPowerTransitions come
                            # from Redfish and vary depending on hardware
                      lastUpdated:
                        type: str
                        required: True
      #TODO: this will fail if the status list is empty
      save:
        json:
          first_xname_id: status[0].xname

---
test_name: Verify PCS power-status for a Node

stages:
  - name: Retrieve a Node from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_xname: Components[0].ID

  #TODO: this is for debugging
  - name: Retrieve a Node from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/ComponentEndpoints/{node_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            allowempty: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "{node_xname}"

  #TODO: this is for debugging
  - name: Ensure that we can conduct a query for a specific Node xname using the Component Query API
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query/{node_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              Components:
                type: seq
                required: True
                sequence:
                  - type: map
                    mapping:
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"
                          - "Mountain"
                          - "Hill"
                      Enabled:
                        type: bool
                        required: True
                      Flag:
                        type: str
                        required: True
                      ID:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      Locked:
                        type: bool
                        required: False
                      NID:
                        type: int
                        required: True
                      NetType:
                        type: str
                        required: True
                      Role:
                        type: str
                        required: True
                      SoftwareStatus:
                        type: str
                        required: False
                      State:
                        type: str
                        required: True
                      SubRole:
                        type: str
                        required: False
                      Subtype:
                        type: str
                        required: False
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"

  #TODO: this is for debugging
  - name: Ensure that we can conduct a query on the ComponentEndpoints collection for a particular Node
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/ComponentEndpoints?id=x0c0r3&id=x0c0s4&id=x0c0s0&id=x0c0s1b0n0&id=x0c0s5b0n0&id=x0c0r7&id=x0c0r4&id=x0c0s2&id=x0c0s0b0&id=x0c0s7b0n0&id=x0c0s6b0&id=x0c0r5&id=x0c0s5&id=x0c0s0e0&id=x0c0s2e0&id=x0c0s1b0&id=x0c0s7e0&id=x0c0s4b0&id=x0c0r1&id=x0c0s5e0&id=x0c0s5b0&id=x0c0s7b0&id=x0c0r0&id=x0c0b0&id=x0c0s2b0n0&id=x0c0s6e0&id=x0c0s3e0&id=x0c0s3b0n0&id=x0c0s1&id=x0c0s7&id=x0c0r2&id=x0c0r6&id=x0c0s3b0&id=x0c0s4e0&id=x0c0s3&id=x0c0s6&id=x0c0s0b0n0&id=x0c0s2b0&id=x0c0s1e0&id=x0c0s6b0n0&id=x0c0s4b0n0&id=x0c0"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ComponentEndpoints:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    allowempty: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                      RedfishEndpointID:
                        type: str
                        required: True

  - name: Retrieve the PCS power-status for the target Node
    request:
      #TODO: this is returning "Component not found in component map." in runCT environment
      url: "{pcs_base_url}/power-status?xname={node_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              status:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        # Node xname
                        pattern: "^x[0-9]{{1,4}}c[0-7]s[0-9]+b[0-9]+n[0-9]+$"
                      powerState:
                        type: str
                        required: True
                        enum:
                          - "on"
                          - "off"
                          - "undefined"
                      managementState:
                        type: str
                        required: True
                        enum:
                          - "available"
                          - "unavailable"
                      error:
                        type: str
                        required: True
                      supportedPowerTransitions:
                        type: seq
                        matching: all
                        required: True
                        sequence:
                          - type: str
                            required: True
                            # no enum here since supportedPowerTransitions come
                            # from Redfish and vary depending on hardware
                      lastUpdated:
                        type: str
                        required: True

---
test_name: Verify PCS power-status for a NodeBMC

stages:
  - name: Retrieve a NodeBMC from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=NodeBMC"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          bmc_xname: Components[0].ID

  - name: Retrieve the PCS power-status for the target NodeBMC
    request:
      url: "{pcs_base_url}/power-status?xname={bmc_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              status:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        # NodeBMC xname
                        pattern: "^x[0-9]{{1,4}}c[0-7]s[0-9]+b[0-9]+$"
                      powerState:
                        type: str
                        required: True
                        enum:
                          - "on"
                          - "off"
                          - "undefined"
                      managementState:
                        type: str
                        required: True
                        enum:
                          - "available"
                          - "unavailable"
                      error:
                        type: str
                        required: True
                      supportedPowerTransitions:
                        type: seq
                        matching: all
                        required: True
                        sequence:
                          - type: str
                            required: True
                            # no enum here since supportedPowerTransitions come
                            # from Redfish and vary depending on hardware
                      lastUpdated:
                        type: str
                        required: True
