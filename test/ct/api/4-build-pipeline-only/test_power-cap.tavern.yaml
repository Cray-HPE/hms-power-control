# MIT License
#
# (C) Copyright [2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the PCS power-cap API
# Author: Mitch Schooler
# Service: Power Control Service

# HMS test metrics test cases: 3
# POST /power-cap/snapshot compute node
# GET /power-cap/{taskID} compute node snapshot
# GET /power-cap compute node
---
test_name: Verify the PCS power-cap resource

stages:
  - name: Retrieve a compute node from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_xname: Components[0].ID
          state_initial: Components[0].State

  # this ensures that the transition to 'Ready' in the next stage succeeds
  - name: Set target node state to Off
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{node_xname}/StateData"
      json: {"State":"Off"}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 204

  # power-cap functionality requires that the target nodes are 'Ready'
  - name: Set target node state to Ready
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{node_xname}/StateData"
      json: {"State":"Ready"}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 204

  - name: Create a PCS power-cap snapshot for the target node
    request:
      url: "{pcs_base_url}/power-cap/snapshot"
      json: {"xnames":["{node_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              taskID:
                type: str
                required: True
      save:
        json:
          snapshotTaskID: taskID

  - name: Retrieve the PCS power-cap snapshot for the target node
    # retry here until power-cap snapshot completes successfully
    max_retries: 12
    delay_after: 10
    request:
      url: "{pcs_base_url}/power-cap/{snapshotTaskID}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              taskID:
                type: str
                required: True
              type:
                type: str
                required: True
                enum:
                  - "snapshot"
              taskCreateTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              taskStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                    #TODO: these are for the following limits (ask if they are hardcoded in PCS or will vary):
                    # - NodePowerLimit
                    # - Accelerator0PowerLimit
                    # - Accelerator1PowerLimit
                    # - Accelerator2PowerLimit
                    # - Accelerator3PowerLimit
                    enum:
                      - 5
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      powerCapLimits:
                        type: seq
                        matching: all
                        required: True
                        sequence:
                          - type: map
                            required: True
                            mapping:
                              name:
                                type: str
                                required: True
                              currentValue:
                                type: int
                                required: True
                              maximumValue:
                                type: int
                                required: True
                              minimumValue:
                                type: int
                                required: True
                      #TODO: remove these, keeping them now for reference
                      #error:
                      #  type: str
                      #  required: False
                      #  enum:
                      #    - "Type, NodeBMC unsupported for power capping"
                      #    #TODO: seeing this vvv on real hardware and in build environment
                      #    - "Missing Power Cap URI"
                      #    - "Xname not found in HSM"

  #TODO: update this for generic power-cap snapshots (all valid responses)
  #- name: Retrieve all PCS power-cap snapshots
  #  request:
  #    url: "{pcs_base_url}/power-cap"
  #    method: GET
  #    verify: !bool "{verify}"
  #  response:
  #    status_code: 200
  #    verify_response_with:
  #      function: tavern.testutils.helpers:validate_pykwalify
  #      extra_kwargs:
  #        schema:
  #          type: map
  #          required: True
  #          mapping:
  #            tasks:
  #              type: seq
  #              matching: all
  #              required: True
  #              sequence:
  #                - type: map
  #                  required: True
  #                  mapping:
  #                    taskID:
  #                      type: str
  #                      required: True
  #                    type:
  #                      type: str
  #                      required: True
  #                      enum:
  #                        - "snapshot"
  #                        - "patch"
  #                    taskCreateTime:
  #                      type: timestamp
  #                      required: True
  #                    automaticExpirationTime:
  #                      type: timestamp
  #                      required: True
  #                    taskStatus:
  #                      type: str
  #                      required: True
  #                      enum:
  #                        - "new"
  #                        - "in-progress"
  #                        - "completed"
  #                    taskCounts:
  #                      type: map
  #                      required: True
  #                      mapping:
  #                        total:
  #                          type: int
  #                          required: True
  #                        new:
  #                          type: int
  #                          required: True
  #                        in-progress:
  #                          type: int
  #                          required: True
  #                        failed:
  #                          type: int
  #                          required: True
  #                        succeeded:
  #                          type: int
  #                          required: True
  #                        un-supported:
  #                          type: int
  #                          required: True

#TODO: restore compute node state?
