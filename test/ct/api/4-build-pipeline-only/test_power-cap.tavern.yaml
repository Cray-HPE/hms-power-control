# MIT License
#
# (C) Copyright [2022-2023] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the PCS power-cap API
# Author: Mitch Schooler
# Service: Power Control Service

# This test assumes that all compute node types in HSM support
# power capping controls which is not always true. Need to ensure
# this is the case when spinning up emulated hardware in runCT.sh

# HMS test metrics test cases: 17

# POST /power-cap/snapshot compute node
# GET /power-cap/{taskID} compute node snapshot
# PATCH /power-cap compute node minimum value
# GET /power-cap/{taskID} compute node patch minimum
# PATCH /power-cap compute node maximum value
# GET /power-cap/{taskID} compute node patch maximum
# PATCH /power-cap compute node greater than maximum value
# GET /power-cap/{taskID} compute node patch greater than maximum
# PATCH /power-cap compute node lower than minimum value
# GET /power-cap/{taskID} compute node patch lower than minimum
# PATCH /power-cap compute node zero value
# GET /power-cap/{taskID} compute node patch zero
# PATCH /power-cap compute node original value
# GET /power-cap/{taskID} compute node patch original

# POST /power-cap/snapshot multiple compute nodes
# GET /power-cap/{taskID} multiple compute node snapshot

# GET /power-cap
---
test_name: Verify power-cap for a single node

stages:
  - name: Retrieve a compute node from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_xname: Components[0].ID
          state_initial: Components[0].State

  # this ensures that the transition to 'Ready' in the next stage succeeds
  - name: Set target node state to Off
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{node_xname}/StateData"
      json: {"State":"Off"}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 204

  # power-cap functionality requires that the target nodes are 'Ready'
  - name: Set target node state to Ready
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{node_xname}/StateData"
      json: {"State":"Ready"}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 204

  - name: Create a power-cap snapshot for the target node
    request:
      url: "{pcs_base_url}/power-cap/snapshot"
      json: {"xnames":["{node_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              taskID:
                type: str
                required: True
      save:
        json:
          snapshot_task_id: taskID

  - name: Retrieve the power-cap snapshot for the target node
    # retry here until power-cap snapshot completes successfully
    max_retries: !int "{power-cap_snapshot_num_attempts}"
    delay_after: !float "{power-cap_snapshot_poll_interval}"
    request:
      url: "{pcs_base_url}/power-cap/{snapshot_task_id}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the snapshot to complete
            allowempty: True
            mapping:
              taskStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed power-cap snapshot for the target node
    request:
      url: "{pcs_base_url}/power-cap/{snapshot_task_id}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              taskID:
                type: str
                required: True
                enum:
                  - "{snapshot_task_id}"
              type:
                type: str
                required: True
                enum:
                  - "snapshot"
              taskCreateTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              taskStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      # ignore "limits" since we're using "powerCapLimits" to cap
                      limits:
                        type: map
                        # this test assumes all compute nodes in HSM support power capping controls, but
                        # some compute node types have empty or no "limits", like Intel and HPE CRAY EX235a
                        #required: True
                        required: False
                        mapping:
                          hostLimitMax:
                            type: int
                            #required: True
                            required: False
                          hostLimitMin:
                            type: int
                            #required: True
                            required: False
                      # use "powerCapLimits" to cap
                      powerCapLimits:
                        type: seq
                        matching: all
                        # this test assumes all compute nodes in HSM support power capping controls, but
                        # some compute node types don't have "powerCapLimits", like HPE Cray EX235n. still
                        # setting this as required since we're only populating HSM with nodes that do
                        # support power capping controls in the runCT environment
                        #required: False
                        required: True
                        sequence:
                          - type: map
                            required: True
                            mapping:
                              name:
                                type: str
                                required: True
                                enum:
                                  - "Node Power Limit"
                                  # this test does not support running against nodes with these controls
                                  #- "Chassis Power Control"
                                  #- "Accelerator[0-3] Power Limit"
                              currentValue:
                                type: int
                                required: True
                              maximumValue:
                                type: int
                                # some compute node types don't have maximumValue, like Intel
                                #required: False
                                required: True
                              minimumValue:
                                type: int
                                # some compute node types don't have minimumValue, like Intel
                                #required: False
                                required: True
      save:
        json:
          #"powerCapLimits": [
          #  {
          #    "name": "Accelerator2 Power Limit",
          #    "currentValue": 0,
          #    "maximumValue": 560,
          #    "minimumValue": 100
          #  },
          #  {
          #    "name": "Node Power Limit",
          #    "currentValue": 0,
          #    "maximumValue": 2754,
          #    "minimumValue": 764
          #  },
          #  ...
          #
          # this assumes no Accelerator Power Limit controls (example above)
          # otherwise "Node Power Limit" may not be powerCapLimits[0].name
          node_power_cap_name: components[0].powerCapLimits[0].name
          node_power_cap_orig: components[0].powerCapLimits[0].currentValue
          node_power_cap_max: components[0].powerCapLimits[0].maximumValue
          node_power_cap_min: components[0].powerCapLimits[0].minimumValue

  - name: Set a power-cap of the minimum value on the target node
    request:
      url: "{pcs_base_url}/power-cap"
      json: {"components":[{"xname":"{node_xname}","controls":[{"name":"{node_power_cap_name}","value": !int "{node_power_cap_min}"}]}]}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              taskID:
                type: str
                required: True
      save:
        json:
          patch_task_id_1: taskID

  - name: Retrieve the power-cap patch for the target node and minimum power cap value
    # retry here until power-cap patch completes successfully
    max_retries: !int "{power-cap_patch_num_attempts}"
    delay_after: !float "{power-cap_patch_poll_interval}"
    request:
      url: "{pcs_base_url}/power-cap/{patch_task_id_1}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the patch to complete
            allowempty: True
            mapping:
              taskStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed power-cap patch for the target node and minimum power cap value
    request:
      url: "{pcs_base_url}/power-cap/{patch_task_id_1}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              taskID:
                type: str
                required: True
                enum:
                  - "{patch_task_id_1}"
              type:
                type: str
                required: True
                enum:
                  - "patch"
              taskCreateTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              taskStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      powerCapLimits:
                        type: seq
                        matching: all
                        required: True
                        sequence:
                          - type: map
                            required: True
                            mapping:
                              name:
                                type: str
                                required: True
                                enum:
                                  - "{node_power_cap_name}"
                              currentValue:
                                type: int
                                required: True
                                enum:
                                  - !int "{node_power_cap_min}"
                              maximumValue:
                                type: int
                                required: True
                                enum:
                                  - !int "{node_power_cap_max}"
                              minimumValue:
                                type: int
                                required: True
                                enum:
                                  - !int "{node_power_cap_min}"

  - name: Set a power-cap of the maximum value on the target node
    request:
      url: "{pcs_base_url}/power-cap"
      json: {"components":[{"xname":"{node_xname}","controls":[{"name":"{node_power_cap_name}","value": !int "{node_power_cap_max}"}]}]}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              taskID:
                type: str
                required: True
      save:
        json:
          patch_task_id_2: taskID

  - name: Retrieve the power-cap patch for the target node and maximum power cap value
    # retry here until power-cap patch completes successfully
    max_retries: !int "{power-cap_patch_num_attempts}"
    delay_after: !float "{power-cap_patch_poll_interval}"
    request:
      url: "{pcs_base_url}/power-cap/{patch_task_id_2}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the patch to complete
            allowempty: True
            mapping:
              taskStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed power-cap patch for the target node and maximum power cap value
    request:
      url: "{pcs_base_url}/power-cap/{patch_task_id_2}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              taskID:
                type: str
                required: True
                enum:
                  - "{patch_task_id_2}"
              type:
                type: str
                required: True
                enum:
                  - "patch"
              taskCreateTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              taskStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      powerCapLimits:
                        type: seq
                        matching: all
                        required: True
                        sequence:
                          - type: map
                            required: True
                            mapping:
                              name:
                                type: str
                                required: True
                                enum:
                                  - "{node_power_cap_name}"
                              currentValue:
                                type: int
                                required: True
                                enum:
                                  - !int "{node_power_cap_max}"
                              maximumValue:
                                type: int
                                required: True
                                enum:
                                  - !int "{node_power_cap_max}"
                              minimumValue:
                                type: int
                                required: True
                                enum:
                                  - !int "{node_power_cap_min}"

  - name: Attempt to set a power-cap greater than the maximum value on the target node
    request:
      url: "{pcs_base_url}/power-cap"
      json: {"components":[{"xname":"{node_xname}","controls":[{"name":"{node_power_cap_name}","value":1234567}]}]}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              taskID:
                type: str
                required: True
      save:
        json:
          patch_task_id_3: taskID

  - name: Retrieve the power-cap patch for the target node and power cap value above maximum
    # retry here until power-cap patch completes
    max_retries: !int "{power-cap_patch_num_attempts}"
    delay_after: !float "{power-cap_patch_poll_interval}"
    request:
      url: "{pcs_base_url}/power-cap/{patch_task_id_3}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the patch to complete
            allowempty: True
            mapping:
              taskStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed power-cap patch for the target node and power cap value above maximum
    request:
      url: "{pcs_base_url}/power-cap/{patch_task_id_3}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              taskID:
                type: str
                required: True
                enum:
                  - "{patch_task_id_3}"
              type:
                type: str
                required: True
                enum:
                  - "patch"
              taskCreateTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              taskStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      error:
                        type: str
                        required: True
                        enum:
                          - "Control ({node_power_cap_name}) value (1234567) is more than maximum ({node_power_cap_max})"

  - name: Attempt to set a power-cap lower than the minimum value on the target node
    request:
      url: "{pcs_base_url}/power-cap"
      json: {"components":[{"xname":"{node_xname}","controls":[{"name":"{node_power_cap_name}","value":1}]}]}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              taskID:
                type: str
                required: True
      save:
        json:
          patch_task_id_4: taskID

  - name: Retrieve the power-cap patch for the target node and power cap value below minimum
    # retry here until power-cap patch completes
    max_retries: !int "{power-cap_patch_num_attempts}"
    delay_after: !float "{power-cap_patch_poll_interval}"
    request:
      url: "{pcs_base_url}/power-cap/{patch_task_id_4}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the patch to complete
            allowempty: True
            mapping:
              taskStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed power-cap patch for the target node and power cap value below minimum
    request:
      url: "{pcs_base_url}/power-cap/{patch_task_id_4}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              taskID:
                type: str
                required: True
                enum:
                  - "{patch_task_id_4}"
              type:
                type: str
                required: True
                enum:
                  - "patch"
              taskCreateTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              taskStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      error:
                        type: str
                        required: True
                        enum:
                          - "Control ({node_power_cap_name}) value (1) is less than minimum ({node_power_cap_min})"

  # noting a difference between CAPMC and PCS - attempting to set a cap of zero on a node whose cap is already
  # zero with CAPMC results in an "Invalid exchange" error but for PCS, this works and doesn't result in an error
  - name: Set a power-cap of zero on the target node
    request:
      url: "{pcs_base_url}/power-cap"
      json: {"components":[{"xname":"{node_xname}","controls":[{"name":"{node_power_cap_name}","value":0}]}]}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              taskID:
                type: str
                required: True
      save:
        json:
          patch_task_id_5: taskID

  - name: Retrieve the power-cap patch for the target node and power cap value of zero
    # retry here until power-cap patch completes successfully
    max_retries: !int "{power-cap_patch_num_attempts}"
    delay_after: !float "{power-cap_patch_poll_interval}"
    request:
      url: "{pcs_base_url}/power-cap/{patch_task_id_5}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the patch to complete
            allowempty: True
            mapping:
              taskStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed power-cap patch for the target node and power cap of zero
    request:
      url: "{pcs_base_url}/power-cap/{patch_task_id_5}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              taskID:
                type: str
                required: True
                enum:
                  - "{patch_task_id_5}"
              type:
                type: str
                required: True
                enum:
                  - "patch"
              taskCreateTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              taskStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      powerCapLimits:
                        type: seq
                        matching: all
                        required: True
                        sequence:
                          - type: map
                            required: True
                            mapping:
                              name:
                                type: str
                                required: True
                                enum:
                                  - "{node_power_cap_name}"
                              currentValue:
                                type: int
                                required: True
                                enum:
                                  - 0
                              maximumValue:
                                type: int
                                required: True
                                enum:
                                  - !int "{node_power_cap_max}"
                              minimumValue:
                                type: int
                                required: True
                                enum:
                                  - !int "{node_power_cap_min}"

  - name: Restore the original power-cap value on the target node
    request:
      url: "{pcs_base_url}/power-cap"
      json: {"components":[{"xname":"{node_xname}","controls":[{"name":"{node_power_cap_name}","value": !int "{node_power_cap_orig}"}]}]}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              taskID:
                type: str
                required: True
      save:
        json:
          patch_task_id_6: taskID

  - name: Retrieve the power-cap patch for the target node and original power cap value
    # retry here until power-cap patch completes successfully
    max_retries: !int "{power-cap_patch_num_attempts}"
    delay_after: !float "{power-cap_patch_poll_interval}"
    request:
      url: "{pcs_base_url}/power-cap/{patch_task_id_6}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the patch to complete
            allowempty: True
            mapping:
              taskStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed power-cap patch for the target node and original power cap value
    request:
      url: "{pcs_base_url}/power-cap/{patch_task_id_6}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              taskID:
                type: str
                required: True
                enum:
                  - "{patch_task_id_6}"
              type:
                type: str
                required: True
                enum:
                  - "patch"
              taskCreateTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              taskStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      powerCapLimits:
                        type: seq
                        matching: all
                        required: True
                        sequence:
                          - type: map
                            required: True
                            mapping:
                              name:
                                type: str
                                required: True
                                enum:
                                  - "{node_power_cap_name}"
                              currentValue:
                                type: int
                                required: True
                                enum:
                                  - !int "{node_power_cap_orig}"
                              maximumValue:
                                type: int
                                required: True
                                enum:
                                  - !int "{node_power_cap_max}"
                              minimumValue:
                                type: int
                                required: True
                                enum:
                                  - !int "{node_power_cap_min}"

  # this ensures that the transition to the node's original state in the next stage succeeds
  - name: Prepare to restore the original state of the target node by setting it to Off
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{node_xname}/StateData"
      json: {"State":"Off"}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 204

  - name: Restore the original state of the target node
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{node_xname}/StateData"
      json: {"State":"{state_initial}"}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 204

---
test_name: Verify power-cap snapshot for multiple nodes

stages:
  - name: Retrieve two compute nodes from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_1_xname: Components[0].ID
          state_1_initial: Components[0].State
          node_2_xname: Components[1].ID
          state_2_initial: Components[1].State

  # this ensures that the transition to 'Ready' in the next stage succeeds
  - name: Set first target node state to Off
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{node_1_xname}/StateData"
      json: {"State":"Off"}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 204

  # power-cap functionality requires that the target nodes are 'Ready'
  - name: Set first target node state to Ready
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{node_1_xname}/StateData"
      json: {"State":"Ready"}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 204

  # this ensures that the transition to 'Ready' in the next stage succeeds
  - name: Set second target node state to Off
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{node_2_xname}/StateData"
      json: {"State":"Off"}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 204

  # power-cap functionality requires that the target nodes are 'Ready'
  - name: Set second target node state to Ready
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{node_2_xname}/StateData"
      json: {"State":"Ready"}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 204

  - name: Create a power-cap snapshot for the target nodes
    request:
      url: "{pcs_base_url}/power-cap/snapshot"
      json: {"xnames":["{node_1_xname}","{node_2_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              taskID:
                type: str
                required: True
      save:
        json:
          snapshot_task_id: taskID

  - name: Retrieve the power-cap snapshot for the target nodes
    # retry here until power-cap snapshot completes successfully
    max_retries: !int "{power-cap_snapshot_num_attempts}"
    delay_after: !float "{power-cap_snapshot_poll_interval}"
    request:
      url: "{pcs_base_url}/power-cap/{snapshot_task_id}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the snapshot to complete
            allowempty: True
            mapping:
              taskStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed power-cap snapshot for the target nodes
    request:
      url: "{pcs_base_url}/power-cap/{snapshot_task_id}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              taskID:
                type: str
                required: True
                enum:
                  - "{snapshot_task_id}"
              type:
                type: str
                required: True
                enum:
                  - "snapshot"
              taskCreateTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              taskStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_1_xname}"
                          - "{node_2_xname}"
                      # ignore "limits" since we're using "powerCapLimits" to cap
                      limits:
                        type: map
                        # this test assumes all compute nodes in HSM support power capping controls, but
                        # some compute node types have empty or no "limits", like Intel and HPE CRAY EX235a
                        #required: True
                        required: False
                        mapping:
                          hostLimitMax:
                            type: int
                            #required: True
                            required: False
                          hostLimitMin:
                            type: int
                            #required: True
                            required: False
                      # use "powerCapLimits" to cap
                      powerCapLimits:
                        type: seq
                        matching: all
                        # this test assumes all compute nodes in HSM support power capping controls, but
                        # some compute node types don't have "powerCapLimits", like HPE Cray EX235n. still
                        # setting this as required since we're only populating HSM with nodes that do
                        # support power capping controls in the runCT environment
                        #required: False
                        required: True
                        sequence:
                          - type: map
                            required: True
                            mapping:
                              name:
                                type: str
                                required: True
                                enum:
                                  - "Node Power Limit"
                                  # this test does not support running against nodes with these controls
                                  #- "Chassis Power Control"
                                  #- "Accelerator[0-3] Power Limit"
                              currentValue:
                                type: int
                                required: True
                              maximumValue:
                                type: int
                                # some compute node types don't have maximumValue, like Intel
                                #required: False
                                required: True
                              minimumValue:
                                type: int
                                # some compute node types don't have minimumValue, like Intel
                                #required: False
                                required: True

  # this ensures that the transition to the node's original state in the next stage succeeds
  - name: Prepare to restore the original state of the first target node by setting it to Off
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{node_1_xname}/StateData"
      json: {"State":"Off"}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 204

  - name: Restore the original state of the first target node
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{node_1_xname}/StateData"
      json: {"State":"{state_1_initial}"}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 204

  # this ensures that the transition to the node's original state in the next stage succeeds
  - name: Prepare to restore the original state of the second target node by setting it to Off
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{node_2_xname}/StateData"
      json: {"State":"Off"}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 204

  - name: Restore the original state of the second target node
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{node_2_xname}/StateData"
      json: {"State":"{state_1_initial}"}
      method: PATCH
      verify: !bool "{verify}"
    response:
      status_code: 204

---
test_name: Verify all power-cap task data

stages:
  - name: Retrieve all power-cap tasks
    request:
      url: "{pcs_base_url}/power-cap"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              tasks:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      taskID:
                        type: str
                        required: True
                      type:
                        type: str
                        required: True
                        enum:
                          - "snapshot"
                          - "patch"
                      taskCreateTime:
                        type: timestamp
                        required: True
                      automaticExpirationTime:
                        type: timestamp
                        required: True
                      taskStatus:
                        type: str
                        required: True
                      taskCounts:
                        type: map
                        required: True
                        mapping:
                          total:
                            type: int
                            required: True
                          new:
                            type: int
                            required: True
                          in-progress:
                            type: int
                            required: True
                          failed:
                            type: int
                            required: True
                          succeeded:
                            type: int
                            required: True
                          un-supported:
                            type: int
                            required: True
