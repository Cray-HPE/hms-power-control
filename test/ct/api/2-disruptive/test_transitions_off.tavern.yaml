# MIT License
#
# (C) Copyright [2023] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the PCS transitions API
# Author: Mitch Schooler
# Service: Power Control Service

# HMS test metrics test cases: 7

# POST /transitions Power On Compute Node
# GET /transitions/{transitionID} Verify On Operation
# GET /power-status Verify On Compute Node
# POST /transitions Force-Off On Compute Node
# GET /transitions/{transitionID} Verify Force-Off Operation
# GET /power-status Verify Off Compute Node

# POST /transitions Power Off Compute Node
# GET /transitions/{transitionID} Verify Off Operation
# GET /power-status Verify Off Compute Node
# POST /transitions Force-Off Off Compute Node
# GET /transitions/{transitionID} Verify Force-Off Operation
# GET /power-status Verify Off Compute Node

# POST /transitions Power On Multiple Compute Nodes
# GET /transitions/{transitionID} Verify On Operation
# GET /power-status Verify On Compute Nodes
# POST /transitions Force-Off Multiple On Compute Nodes
# GET /transitions/{transitionID} Verify Force-Off Operation
# GET /power-status Verify Off Compute Nodes

# POST /transitions Power On Chassis
# GET /transitions/{transitionID} Verify On Operation
# GET /power-status Verify On Chassis
# POST /transitions Force-Off On Chassis
# GET /transitions/{transitionID} Verify Force-Off Operation
# GET /power-status Verify Off Chassis

# POST /transitions Power On ComputeModule
# GET /transitions/{transitionID} Verify On Operation
# GET /power-status Verify On ComputeModule
# POST /transitions Force-Off On ComputeModule
# GET /transitions/{transitionID} Verify Force-Off Operation
# GET /power-status Verify Off ComputeModule

# POST /transitions Power On Compute Node
# GET /transitions/{transitionID} Verify On Operation
# GET /power-status Verify On Compute Node
# POST /transitions Force-Off Compute Node
# DELETE /transitions/{transitionID} Force-Off Operation
# GET /transitions/{transitionID} Aborted Force-Off Operation
# GET /power-status Verify On Compute Node

# GET /transitions all tasks
---
test_name: Verify transitions powers off a compute node that is powered on

stages:
  - name: Retrieve a compute node from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute&locked=False"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_xname: Components[0].ID

  - name: Power the target node on to prepare it for the test case
    request:
      url: "{pcs_base_url}/transitions"
      json: {"operation":"on","taskDeadlineMinutes": !int "{transition_on_task_deadline_minutes}","location":[{"xname":"{node_xname}"}]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
              operation:
                required: True
                type: str
                enum:
                  - "On"
      save:
        json:
          transition_id_prep: transitionID

  - name: Poll until the on transition operation has completed
    max_retries: !int "{transition_on_num_attempts}"
    delay_after: !float "{transition_on_poll_interval}"
    request:
      url: "{pcs_base_url}/transitions/{transition_id_prep}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the operation to complete
            allowempty: True
            mapping:
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed on transition data
    request:
      url: "{pcs_base_url}/transitions/{transition_id_prep}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
                enum:
                  - "{transition_id_prep}"
              operation:
                type: str
                required: True
                enum:
                  - "On"
              createTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              tasks:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      taskStatus:
                        type: str
                        required: True
                        enum:
                          - "succeeded"
                      taskStatusDescription:
                        type: str
                        required: True
                        enum:
                          - "Component already in desired state"
                          - "Transition confirmed, on"

  - name: Verify that the target node is powered on using power-status
    request:
      url: "{pcs_base_url}/power-status?xname={node_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              status:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    # only check the power state for the target node
                    allowempty: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      powerState:
                        type: str
                        required: True
                        enum:
                          - "on"

  - name: Power the target node off with a force-off transition
    request:
      url: "{pcs_base_url}/transitions"
      json: {"operation":"force-off","taskDeadlineMinutes": !int "{transition_force-off_task_deadline_minutes}","location":[{"xname":"{node_xname}"}]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
              operation:
                required: True
                type: str
                enum:
                  - "Force-Off"
      save:
        json:
          transition_id_actual: transitionID

  - name: Poll until the force-off transition operation has completed
    max_retries: !int "{transition_force-off_num_attempts}"
    delay_after: !float "{transition_force-off_poll_interval}"
    request:
      url: "{pcs_base_url}/transitions/{transition_id_actual}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the operation to complete
            allowempty: True
            mapping:
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed force-off transition data
    request:
      url: "{pcs_base_url}/transitions/{transition_id_actual}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
                enum:
                  - "{transition_id_actual}"
              operation:
                type: str
                required: True
                enum:
                  - "Force-Off"
              createTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              tasks:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      taskStatus:
                        type: str
                        required: True
                        enum:
                          - "succeeded"
                      taskStatusDescription:
                        type: str
                        required: True
                        enum:
                          - "Transition confirmed, forceoff"

  - name: Verify that the target node is powered off using power-status
    request:
      url: "{pcs_base_url}/power-status?xname={node_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              status:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    # only check the power state for the target node
                    allowempty: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      powerState:
                        type: str
                        required: True
                        enum:
                          - "off"

---
test_name: Verify transitions keeps power off for a compute node that is already powered off

stages:
  - name: Retrieve a compute node from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute&locked=False"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_xname: Components[0].ID

  - name: Power the target node off to prepare it for the test case
    request:
      url: "{pcs_base_url}/transitions"
      json: {"operation":"force-off","taskDeadlineMinutes": !int "{transition_force-off_task_deadline_minutes}","location":[{"xname":"{node_xname}"}]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
              operation:
                required: True
                type: str
                enum:
                  - "Force-Off"
      save:
        json:
          transition_id_prep: transitionID

  - name: Poll until the initial force-off transition operation has completed
    max_retries: !int "{transition_force-off_num_attempts}"
    delay_after: !float "{transition_force-off_poll_interval}"
    request:
      url: "{pcs_base_url}/transitions/{transition_id_prep}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the operation to complete
            allowempty: True
            mapping:
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the data for the completed initial off transition
    request:
      url: "{pcs_base_url}/transitions/{transition_id_prep}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
                enum:
                  - "{transition_id_prep}"
              operation:
                type: str
                required: True
                enum:
                  - "Force-Off"
              createTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              tasks:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      taskStatus:
                        type: str
                        required: True
                        enum:
                          - "succeeded"
                      taskStatusDescription:
                        type: str
                        required: True
                        enum:
                          - "Component already in desired state"
                          - "Transition confirmed, forceoff"

  - name: Verify that the target node is powered off using power-status
    request:
      url: "{pcs_base_url}/power-status?xname={node_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              status:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    # only check the power state for the target node
                    allowempty: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      powerState:
                        type: str
                        required: True
                        enum:
                          - "off"

  - name: Issue another force-off transition for the target node
    request:
      url: "{pcs_base_url}/transitions"
      json: {"operation":"force-off","taskDeadlineMinutes": !int "{transition_force-off_task_deadline_minutes}","location":[{"xname":"{node_xname}"}]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
              operation:
                required: True
                type: str
                enum:
                  - "Force-Off"
      save:
        json:
          transition_id_actual: transitionID

  - name: Poll until the second force-off transition operation has completed
    max_retries: !int "{transition_force-off_num_attempts}"
    delay_after: !float "{transition_force-off_poll_interval}"
    request:
      url: "{pcs_base_url}/transitions/{transition_id_actual}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the operation to complete
            allowempty: True
            mapping:
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the data for the second completed force-off transition
    request:
      url: "{pcs_base_url}/transitions/{transition_id_actual}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
                enum:
                  - "{transition_id_actual}"
              operation:
                type: str
                required: True
                enum:
                  - "Force-Off"
              createTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              tasks:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      taskStatus:
                        type: str
                        required: True
                        enum:
                          - "succeeded"
                      taskStatusDescription:
                        type: str
                        required: True
                        enum:
                          - "Component already in desired state"

  - name: Verify that the target node remained powered off using power-status
    request:
      url: "{pcs_base_url}/power-status?xname={node_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              status:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    # only check the power state for the target node
                    allowempty: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      powerState:
                        type: str
                        required: True
                        enum:
                          - "off"

---
test_name: Verify transitions powers off multiple compute nodes that are powered on

stages:
  - name: Retrieve two compute nodes from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute&locked=False"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_1_xname: Components[0].ID
          node_2_xname: Components[1].ID

  - name: Power the target nodes on to prepare them for the test case
    request:
      url: "{pcs_base_url}/transitions"
      json: {"operation":"on","taskDeadlineMinutes": !int "{transition_on_task_deadline_minutes}","location":[{"xname":"{node_1_xname}"},{"xname":"{node_2_xname}"}]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
              operation:
                required: True
                type: str
                enum:
                  - "On"
      save:
        json:
          transition_id_prep: transitionID

  - name: Poll until the on transition operation has completed
    max_retries: !int "{transition_on_num_attempts}"
    delay_after: !float "{transition_on_poll_interval}"
    request:
      url: "{pcs_base_url}/transitions/{transition_id_prep}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the operation to complete
            allowempty: True
            mapping:
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed on transition data
    request:
      url: "{pcs_base_url}/transitions/{transition_id_prep}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
                enum:
                  - "{transition_id_prep}"
              operation:
                type: str
                required: True
                enum:
                  - "On"
              createTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              tasks:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_1_xname}"
                          - "{node_2_xname}"
                      taskStatus:
                        type: str
                        required: True
                        enum:
                          - "succeeded"
                      taskStatusDescription:
                        type: str
                        required: True
                        enum:
                          - "Component already in desired state"
                          - "Transition confirmed, on"

  - name: Verify that the target nodes are powered on using power-status
    request:
      url: "{pcs_base_url}/power-status?xname={node_1_xname}&xname={node_2_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              status:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    # only check the power states for the target nodes
                    allowempty: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_1_xname}"
                          - "{node_2_xname}"
                      powerState:
                        type: str
                        required: True
                        enum:
                          - "on"

  - name: Power the target nodes off with a force-off transition
    request:
      url: "{pcs_base_url}/transitions"
      json: {"operation":"force-off","taskDeadlineMinutes": !int "{transition_force-off_task_deadline_minutes}","location":[{"xname":"{node_1_xname}"},{"xname":"{node_2_xname}"}]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
              operation:
                required: True
                type: str
                enum:
                  - "Force-Off"
      save:
        json:
          transition_id_actual: transitionID

  - name: Poll until the force-off transition operation has completed
    max_retries: !int "{transition_force-off_num_attempts}"
    delay_after: !float "{transition_force-off_poll_interval}"
    request:
      url: "{pcs_base_url}/transitions/{transition_id_actual}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the operation to complete
            allowempty: True
            mapping:
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed force-off transition data
    request:
      url: "{pcs_base_url}/transitions/{transition_id_actual}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
                enum:
                  - "{transition_id_actual}"
              operation:
                type: str
                required: True
                enum:
                  - "Force-Off"
              createTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              tasks:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_1_xname}"
                          - "{node_2_xname}"
                      taskStatus:
                        type: str
                        required: True
                        enum:
                          - "succeeded"
                      taskStatusDescription:
                        type: str
                        required: True
                        enum:
                          - "Transition confirmed, forceoff"

  - name: Verify that the target nodes are powered off using power-status
    request:
      url: "{pcs_base_url}/power-status?xname={node_1_xname}&xname={node_2_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              status:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    # only check the power states for the target nodes
                    allowempty: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_1_xname}"
                          - "{node_2_xname}"
                      powerState:
                        type: str
                        required: True
                        enum:
                          - "off"

---
test_name: Verify transitions powers off a chassis that is powered on

stages:
  - name: Retrieve a chassis from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Chassis"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          chassis_xname: Components[0].ID

  - name: Power the target chassis on to prepare it for the test case
    request:
      url: "{pcs_base_url}/transitions"
      json: {"operation":"on","taskDeadlineMinutes": !int "{transition_on_task_deadline_minutes}","location":[{"xname":"{chassis_xname}"}]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
              operation:
                required: True
                type: str
                enum:
                  - "On"
      save:
        json:
          transition_id_prep: transitionID

  - name: Poll until the on transition operation has completed
    max_retries: !int "{transition_on_num_attempts}"
    delay_after: !float "{transition_on_poll_interval}"
    request:
      url: "{pcs_base_url}/transitions/{transition_id_prep}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the operation to complete
            allowempty: True
            mapping:
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed on transition data
    request:
      url: "{pcs_base_url}/transitions/{transition_id_prep}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
                enum:
                  - "{transition_id_prep}"
              operation:
                type: str
                required: True
                enum:
                  - "On"
              createTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              tasks:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{chassis_xname}"
                      taskStatus:
                        type: str
                        required: True
                        enum:
                          - "succeeded"
                      taskStatusDescription:
                        type: str
                        required: True
                        enum:
                          - "Component already in desired state"
                          - "Transition confirmed, on"

  - name: Verify that the target chassis is powered on using power-status
    request:
      url: "{pcs_base_url}/power-status?xname={chassis_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              status:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    # only check the power state for the target chassis
                    allowempty: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{chassis_xname}"
                      powerState:
                        type: str
                        required: True
                        enum:
                          - "on"

  - name: Power the target chassis off with a force-off transition
    request:
      url: "{pcs_base_url}/transitions"
      json: {"operation":"force-off","taskDeadlineMinutes": !int "{transition_force-off_task_deadline_minutes}","location":[{"xname":"{chassis_xname}"}]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
              operation:
                required: True
                type: str
                enum:
                  - "Force-Off"
      save:
        json:
          transition_id_actual: transitionID

  - name: Poll until the force-off transition operation has completed
    max_retries: !int "{transition_force-off_num_attempts}"
    delay_after: !float "{transition_force-off_poll_interval}"
    request:
      url: "{pcs_base_url}/transitions/{transition_id_actual}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the operation to complete
            allowempty: True
            mapping:
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed force-off transition data
    request:
      url: "{pcs_base_url}/transitions/{transition_id_actual}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
                enum:
                  - "{transition_id_actual}"
              operation:
                type: str
                required: True
                enum:
                  - "Force-Off"
              createTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              tasks:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{chassis_xname}"
                      taskStatus:
                        type: str
                        required: True
                        enum:
                          - "succeeded"
                      taskStatusDescription:
                        type: str
                        required: True
                        enum:
                          - "Transition confirmed, forceoff"

  - name: Verify that the target chassis is powered off using power-status
    request:
      url: "{pcs_base_url}/power-status?xname={chassis_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              status:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    # only check the power state for the target chassis
                    allowempty: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{chassis_xname}"
                      powerState:
                        type: str
                        required: True
                        enum:
                          - "off"

---
test_name: Verify transitions powers off a ComputeModule that is powered on

stages:
  - name: Retrieve a ComputeModule from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=ComputeModule"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          compute_module_xname: Components[0].ID

  - name: Power the target ComputeModule on to prepare it for the test case
    request:
      url: "{pcs_base_url}/transitions"
      json: {"operation":"on","taskDeadlineMinutes": !int "{transition_on_task_deadline_minutes}","location":[{"xname":"{compute_module_xname}"}]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
              operation:
                required: True
                type: str
                enum:
                  - "On"
      save:
        json:
          transition_id_prep: transitionID

  - name: Poll until the on transition operation has completed
    max_retries: !int "{transition_on_num_attempts}"
    delay_after: !float "{transition_on_poll_interval}"
    request:
      url: "{pcs_base_url}/transitions/{transition_id_prep}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the operation to complete
            allowempty: True
            mapping:
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed on transition data
    request:
      url: "{pcs_base_url}/transitions/{transition_id_prep}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
                enum:
                  - "{transition_id_prep}"
              operation:
                type: str
                required: True
                enum:
                  - "On"
              createTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              tasks:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{compute_module_xname}"
                      taskStatus:
                        type: str
                        required: True
                        enum:
                          - "succeeded"
                      taskStatusDescription:
                        type: str
                        required: True
                        enum:
                          - "Component already in desired state"
                          - "Transition confirmed, on"

  - name: Verify that the target ComputeModule is powered on using power-status
    request:
      url: "{pcs_base_url}/power-status?xname={compute_module_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              status:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    # only check the power state for the target ComputeModule
                    allowempty: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{compute_module_xname}"
                      powerState:
                        type: str
                        required: True
                        enum:
                          - "on"

  - name: Power the target ComputeModule off with a force-off transition
    request:
      url: "{pcs_base_url}/transitions"
      json: {"operation":"force-off","taskDeadlineMinutes": !int "{transition_force-off_task_deadline_minutes}","location":[{"xname":"{compute_module_xname}"}]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
              operation:
                required: True
                type: str
                enum:
                  - "Force-Off"
      save:
        json:
          transition_id_actual: transitionID

  - name: Poll until the force-off transition operation has completed
    max_retries: !int "{transition_force-off_num_attempts}"
    delay_after: !float "{transition_force-off_poll_interval}"
    request:
      url: "{pcs_base_url}/transitions/{transition_id_actual}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the operation to complete
            allowempty: True
            mapping:
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed force-off transition data
    request:
      url: "{pcs_base_url}/transitions/{transition_id_actual}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
                enum:
                  - "{transition_id_actual}"
              operation:
                type: str
                required: True
                enum:
                  - "Force-Off"
              createTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              tasks:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{compute_module_xname}"
                      taskStatus:
                        type: str
                        required: True
                        enum:
                          - "succeeded"
                      taskStatusDescription:
                        type: str
                        required: True
                        enum:
                          - "Transition confirmed, forceoff"

  - name: Verify that the target ComputeModule is powered off using power-status
    request:
      url: "{pcs_base_url}/power-status?xname={compute_module_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              status:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    # only check the power state for the target ComputeModule
                    allowempty: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{compute_module_xname}"
                      powerState:
                        type: str
                        required: True
                        enum:
                          - "off"

---
test_name: Verify that off transition operations can be aborted

stages:
  - name: Retrieve a compute node from HSM to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute&locked=False"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_xname: Components[0].ID

  - name: Power the target node on to prepare it for the test case
    request:
      url: "{pcs_base_url}/transitions"
      json: {"operation":"on","taskDeadlineMinutes": !int "{transition_on_task_deadline_minutes}","location":[{"xname":"{node_xname}"}]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
              operation:
                required: True
                type: str
                enum:
                  - "On"
      save:
        json:
          transition_id_prep: transitionID

  - name: Poll until the on transition operation has completed
    max_retries: !int "{transition_on_num_attempts}"
    delay_after: !float "{transition_on_poll_interval}"
    request:
      url: "{pcs_base_url}/transitions/{transition_id_prep}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the operation to complete
            allowempty: True
            mapping:
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed on transition data
    request:
      url: "{pcs_base_url}/transitions/{transition_id_prep}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
                enum:
                  - "{transition_id_prep}"
              operation:
                type: str
                required: True
                enum:
                  - "On"
              createTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              tasks:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      taskStatus:
                        type: str
                        required: True
                        enum:
                          - "succeeded"
                      taskStatusDescription:
                        type: str
                        required: True
                        enum:
                          - "Component already in desired state"
                          - "Transition confirmed, on"

  - name: Verify that the target node is powered on using power-status
    request:
      url: "{pcs_base_url}/power-status?xname={node_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              status:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    # only check the power state for the target node
                    allowempty: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      powerState:
                        type: str
                        required: True
                        enum:
                          - "on"

  - name: Issue a force-off transition for the target node
    request:
      url: "{pcs_base_url}/transitions"
      json: {"operation":"force-off","taskDeadlineMinutes": !int "{transition_force-off_task_deadline_minutes}","location":[{"xname":"{node_xname}"}]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
              operation:
                required: True
                type: str
                enum:
                  - "Force-Off"
      save:
        json:
          transition_id_actual: transitionID

  - name: Abort the previously issued force-off transition
    request:
      url: "{pcs_base_url}/transitions/{transition_id_actual}"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 202
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              abortStatus:
                required: True
                type: str
                enum:
                  - "Accepted - abort initiated"

  - name: Poll until the aborted force-off transition operation has been aborted
    max_retries: !int "{transition_force-off_num_attempts}"
    delay_after: !float "{transition_force-off_poll_interval}"
    request:
      url: "{pcs_base_url}/transitions/{transition_id_actual}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the operation to complete
            allowempty: True
            mapping:
              transitionStatus:
                type: str
                required: True
                enum:
                  # may be either depending on timing
                  - "completed"
                  - "aborted"

  - name: Retrieve the data for the aborted force-off transition
    request:
      url: "{pcs_base_url}/transitions/{transition_id_actual}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
                enum:
                  - "{transition_id_actual}"
              operation:
                type: str
                required: True
                enum:
                  - "Force-Off"
              createTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              transitionStatus:
                type: str
                required: True
                enum:
                  # may be either depending on timing
                  - "aborted"
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              tasks:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      taskStatus:
                        type: str
                        required: True
                        enum:
                          # may be either depending on timing
                          - "failed"
                          - "succeeded"
                      taskStatusDescription:
                        type: str
                        required: True
                        #pattern: "Aborted.*"
                        #pattern: "Transition confirmed, on"
                      error:
                        type: str
                        # may not be present depending on timing
                        required: False
                        enum:
                          - "Transition aborted"

---
test_name: Verify that all transition operations have the expected data

stages:
  - name: Retrieve all transition operation data
    request:
      url: "{pcs_base_url}/transitions"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitions:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      transitionID:
                        type: str
                        required: True
                      operation:
                        type: str
                        required: True
                        enum:
                          - "Init"
                          - "On"
                          - "Off"
                          - "Soft-Off"
                          - "Force-Off"
                          - "Soft-Restart"
                          - "Hard-Restart"
                      createTime:
                        type: timestamp
                        required: True
                      automaticExpirationTime:
                        type: timestamp
                        required: True
                      transitionStatus:
                        type: str
                        required: True
                        enum:
                          - "new"
                          - "in-progress"
                          - "completed"
                          - "aborted"
                          - "abort-signaled"
                      taskCounts:
                        type: map
                        required: True
                        mapping:
                          total:
                            type: int
                            required: True
                          new:
                            type: int
                            required: True
                          in-progress:
                            type: int
                            required: True
                          failed:
                            type: int
                            required: True
                          succeeded:
                            type: int
                            required: True
                          un-supported:
                            type: int
                            required: True