# MIT License
#
# (C) Copyright [2023] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the PCS transitions API
# Author: Mitch Schooler
# Service: Power Control Service

# HMS test metrics test cases: 1
# POST /transitions fails for Node that is already locked
---
test_name: Verify transitions handles requests for nodes that are locked

stages:
  - name: Retrieve an unlocked compute Node target from HSM to use in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute&locked=False"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          node_xname: Components[0].ID

  - name: Power the target node on to prepare it for the test case
    request:
      url: "{pcs_base_url}/transitions"
      #TODO: taskDeadlineMinutes configuration?
      json: {"operation":"on","taskDeadlineMinutes":5,"location":[{"xname":"{node_xname}"}]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
              operation:
                required: True
                type: str
                enum:
                  - "On"
      save:
        json:
          transition_id_prep: transitionID

  - name: Poll until the on transition operation has completed
    max_retries: !int "{transition_on_num_attempts}"
    delay_after: !float "{transition_on_poll_interval}"
    request:
      url: "{pcs_base_url}/transitions/{transition_id_prep}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the operation to complete
            allowempty: True
            mapping:
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed on transition data
    request:
      url: "{pcs_base_url}/transitions/{transition_id_prep}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
                enum:
                  - "{transition_id_prep}"
              operation:
                type: str
                required: True
                enum:
                  - "On"
              createTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              tasks:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      taskStatus:
                        type: str
                        required: True
                        enum:
                          - "succeeded"
                      taskStatusDescription:
                        type: str
                        required: True
                        enum:
                          - "Component already in desired state"
                          - "Transition confirmed, on"

  - name: Verify that the target node is powered on using power-status
    request:
      url: "{pcs_base_url}/power-status?xname={node_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              status:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    # only check the power state for the target node
                    allowempty: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      powerState:
                        type: str
                        required: True
                        enum:
                          - "on"

  - name: Lock the target Node
    request:
      url: "{hsm_base_url}/hsm/v2/locks/lock"
      json: {"ComponentIDs":["{node_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Counts:
                type: map
                required: True
                mapping:
                  Total:
                    type: int
                    required: True
                    enum:
                      - 1
                  Success:
                    type: int
                    required: True
                    enum:
                      - 1
                  Failure:
                    type: int
                    required: True
                    enum:
                      - 0
              Success:
                type: map
                required: True
                mapping:
                  ComponentIDs:
                    type: seq
                    required: True
                    sequence:
                      - type: str
                        required: True
                        enum:
                          - "{node_xname}"
              Failure:
                type: seq
                required: True
                sequence:
                  - type: map
                    required: False
                    mapping:
                      ID:
                        type: str
                        required: False
                      Reason:
                        type: str
                        required: False
        function: tavern.testutils.helpers:validate_content
        extra_kwargs:
          comparisons:
            - jmespath: "length(@.Success.ComponentIDs)"
              operator: "eq"
              expected: 1

  - name: Attempt a power transition for a locked node
    request:
      url: "{pcs_base_url}/transitions"
      #TODO: taskDeadlineMinutes configuration?
      json: {"operation":"force-off","taskDeadlineMinutes":5,"location":[{"xname":"{node_xname}"}]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
              operation:
                required: True
                type: str
                enum:
                  - "Force-Off"
      save:
        json:
          transition_id_actual: transitionID

  - name: Poll until the force-off transition operation has completed
    max_retries: !int "{transition_force-off_num_attempts}"
    delay_after: !float "{transition_force-off_poll_interval}"
    request:
      url: "{pcs_base_url}/transitions/{transition_id_actual}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only wait for the operation to complete
            allowempty: True
            mapping:
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"

  - name: Retrieve the completed on transition data
    request:
      url: "{pcs_base_url}/transitions/{transition_id_actual}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              transitionID:
                type: str
                required: True
                enum:
                  - "{transition_id_actual}"
              operation:
                type: str
                required: True
                enum:
                  - "Force-Off"
              createTime:
                type: timestamp
                required: True
              automaticExpirationTime:
                type: timestamp
                required: True
              transitionStatus:
                type: str
                required: True
                enum:
                  - "completed"
              taskCounts:
                type: map
                required: True
                mapping:
                  total:
                    type: int
                    required: True
                  new:
                    type: int
                    required: True
                  in-progress:
                    type: int
                    required: True
                  failed:
                    type: int
                    required: True
                  succeeded:
                    type: int
                    required: True
                  un-supported:
                    type: int
                    required: True
              tasks:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      xname:
                        type: str
                        required: True
                        enum:
                          - "{node_xname}"
                      taskStatus:
                        type: str
                        required: True
                        enum:
                          - "failed"
                      taskStatusDescription:
                        type: str
                        required: True
                        enum:
                          - "Failed to achieve transition"
                      error:
                        type: str
                        required: True
                        enum:
                          - "Unable to reserve component"

  - name: Unlock the target Node
    request:
      url: "{hsm_base_url}/hsm/v2/locks/unlock"
      json: {"ComponentIDs":["{node_xname}"]}
      method: POST
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Counts:
                type: map
                required: True
                mapping:
                  Total:
                    type: int
                    required: True
                    enum:
                      - 1
                  Success:
                    type: int
                    required: True
                    enum:
                      - 1
                  Failure:
                    type: int
                    required: True
                    enum:
                      - 0
              Success:
                type: map
                required: True
                mapping:
                  ComponentIDs:
                    type: seq
                    required: True
                    sequence:
                      - type: str
                        required: True
                        enum:
                          - "{node_xname}"
              Failure:
                type: seq
                required: True
                sequence:
                  - type: map
                    required: False
                    mapping:
                      ID:
                        type: str
                        required: False
                      Reason:
                        type: str
                        required: False
        function: tavern.testutils.helpers:validate_content
        extra_kwargs:
          comparisons:
            - jmespath: "length(@.Success.ComponentIDs)"
              operator: "eq"
              expected: 1